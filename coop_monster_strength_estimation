import random

# Constants for the simulation
NUM_ROUNDS = 100
MAX_PLAYERS = 3
NUM_PLAYER_CARDS = 3

# Helper function to simulate a triple coin flip
def triple_coin_flip():
    return random.randint(0, 7)  # 0 to 7 represents 000 to 111 in binary

# Define the Card class
class Card:
    def __init__(self, card_type, health, attack, defense):
        self.card_type = card_type
        self.health = health * 1  # Assuming health in the stats is a multiplier of 1
        self.attack = attack
        self.defense = defense
        self.original_health = self.health  # To reset health after each round

    def reset_health(self):
        self.health = self.original_health

# Define the Monster class
class Monster(Card):
    def __init__(self, health, attack, defense, strengths, weaknesses):
        super().__init__('monster', health, attack, defense)
        self.strengths = strengths
        self.weaknesses = weaknesses

# Initialize player cards with the stats provided
player_cards = [
    Card('type4', 4, 300, 360),
    Card('type2', 4, 420, 240),
    Card('type1', 4, 300, 360),
    Card('type1', 4, 360, 300),
    Card('type4', 4, 360, 300),
    Card('type4', 4, 420, 240),
    Card('type2', 4, 300, 360),
    Card('type1', 4, 420, 240),
    Card('type3', 4, 420, 240),
    Card('type5', 4, 360, 300),
    Card('type5', 4, 420, 240),
    Card('type2', 4, 360, 300),
    Card('type4', 5, 240, 240),
    Card('type1', 5, 240, 240),
    Card('type3', 4, 240, 420),
    Card('type5', 5, 240, 240),
    Card('type2', 4, 240, 420),
    Card('type3', 5, 240, 240),
    Card('type5', 4, 240, 420),
    Card('type1', 4, 240, 420),
    Card('type4', 4, 240, 420),
    Card('type5', 4, 300, 300),
    Card('type2', 5, 240, 240),
    Card('type1', 4, 300, 300),
    Card('type3', 4, 240, 360),
    Card('type4', 4, 300, 300),
    Card('type4', 4, 240, 360),
    Card('type5', 4, 360, 240),
    Card('type4', 4, 360, 240),
    Card('type2', 4, 300, 300),
    Card('type2', 4, 360, 240),
    Card('type1', 4, 360, 240),
    Card('type3', 3, 420, 420),
    Card('type2', 3, 420, 420),
    Card('type3', 4, 300, 300),
    Card('type3', 4, 360, 240),
    Card('type2', 4, 240, 360),
    Card('type5', 4, 240, 360),
    Card('type5', 3, 420, 420),
    Card('type1', 3, 420, 420),
    Card('type4', 3, 420, 420),
    Card('type2', 3, 420, 360),
    Card('type1', 4, 240, 360),
    Card('type3', 3, 360, 420),
    Card('type3', 3, 420, 360),
    Card('type1', 4, 300, 240),
    Card('type4', 3, 420, 360),
    Card('type5', 3, 360, 420),
]

# Initialize monster card with placeholder stats
# Weaknesses influence game disproptionally
monster = Monster(
    health=25,
    attack=540,
    defense=540,
    strengths={'type1': 1.25, 'type2': 1.5},  # Example: Stronger against type1 and type2
    weaknesses={'type3': 0, 'type4': 0}   # Example: Weaker against type3 and type4
)

# Function to simulate a battle
def battle(player_card, monster):
    player_roll = triple_coin_flip()
    monster_roll = triple_coin_flip()

    # Calculate player's effective attack and monster's effective defense
    player_attack = player_card.attack * player_roll
    monster_defense = monster.defense * monster_roll

    # Apply type-related strengths or weaknesses
    if player_card.card_type in monster.strengths:
        monster_defense *= monster.strengths[player_card.card_type]
    if player_card.card_type in monster.weaknesses:
        player_attack *= monster.weaknesses[player_card.card_type]

    # Determine if damage is dealt
    if player_attack > monster_defense:
        monster.health -= 1
    if monster_roll == 7:  # Special roll for monster
        player_card.health -= 1

# Function to simulate a round
def simulate_round(players, monster):
    for player in players:
        for card in player:
            battle(card, monster)
            if card.health <= 0:
                player.remove(card)

# Function to simulate the game
def simulate_game():
    monster_wins = 0
    player_card_counts = [0] * MAX_PLAYERS

    for _ in range(NUM_ROUNDS):
        # Reset health for all cards
        for card in player_cards:
            card.reset_health()
        monster.reset_health()

        # Initialize players with random cards
        players = [random.sample(player_cards, NUM_PLAYER_CARDS) for _ in range(MAX_PLAYERS)]

        # Simulate rounds until monster or all players are defeated
        while monster.health > 0 and any(players):
            simulate_round(players, monster)

        # Check for winner
        if monster.health <= 0:
            for i, player in enumerate(players):
                player_card_counts[i] += len(player)
        else:
            monster_wins += 1

    # Calculate average remaining cards for each player
    avg_remaining_cards = [count / NUM_ROUNDS for count in player_card_counts]

    return monster_wins, avg_remaining_cards

# Run the simulation and print the results
monster_wins, avg_remaining_cards = simulate_game()
print(f"Monster wins: {monster_wins}")
print(f"Average remaining cards for each player: {avg_remaining_cards}")
